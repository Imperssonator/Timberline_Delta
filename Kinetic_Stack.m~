function [out, UsedChains] = Kinetic_Stack(DPdist)

close all
clc
%% Stackemup
% This function takes a degree of polymerization distribution as an input, in the form of an Nx2
% matrix:
% [DoP   # of chains]
% The output will be a histogram of the tie chain lengths

% as an initial example, we will use a distribution with average DP of 400
% (Mn = 67200) and a standard deviation of 50 (this is not the same as PDI)
% and assumes the chains follow a normal distribution, which is usually not
% the case

%% Hard Coded Parameters
global DPs T kb DPdist1
DPdist1 = DPdist;
T = 298;
kb = 1.38E-23;
DPs = tabulate(DPdist1);
EqLen = 10;                % Number of iterations stack can go without changing length to be considered 'equilibrated'
EqTime = 75;
Iterations = 100000;
% pi_length = 300;           % how many chains will we stack

Stack = [0 DPSample()-1]; % stack is zero-indexed at the first monomer of the first chain to be picked

[n , ~] = size(Stack);
x = find(DPdist1==Stack(2)+1);
DPdist1(x(discretesample(x,1))) = [];
DPs = tabulate(DPdist1);
count = 0;

L = ones(Iterations,1);
iter = 0;

while iter<Iterations %count<EqTime
    iter = iter+1;
    if n>1
        Rates = get_rates(Stack); % Rates is [nx1]
        Cuts = make_bins(Rates); % cuts is also [nx1] ranging from 0 to 1
        process = choose_process(rand,Cuts);
        Stack = perform_process(Stack,process);
        disp(length(Stack))
        L(iter) = length(Stack);
%         disp(count)
        if length(L)>EqLen
            diff = L(end)-L(end-EqLen);
            if abs(diff)<2
                count = count+1;
            else
                count = 0;
            end
        end     
    else
        Stack=initiate(Stack);
        L(iter) = 1;
    end
    [n , ~] = size(Stack);
    
    if mod(iter,10000) == 0
%         figure(1)
%         hold on
%         stackplot(Stack,iter)
%         drawnow
        
%         figure
%         hist(DPdist1,20);           % Histogram of remaining free chains
        
    end
end

StartDist = tabulate(DPdist);
First = StartDist(1,1); Last = StartDist(end,1);
EndDist = tabulate(DPdist1);
InnerFirst = EndDist(1,1); InnerLast = EndDist(end,1);
Prefix = (First:InnerFirst-1)';
Suffix = (InnerLast+1:Last)';
Prefix = [Prefix, zeros(size(Prefix,1),2)];
Suffix = [Suffix, zeros(size(Suffix,1),2)];
EndDist = [Prefix; EndDist; Suffix];                % Add zeros for the lengths that were totally depleted in the simulation

UsedChains = [StartDist(:,1), StartDist(:,2:3)-EndDist(:,2:3)];
figure
bar(UsedChains(:,1),UsedChains(:,2))

figure
=======
        figure(1)
        hold on
        stackplot(Stack,iter)
        drawnow
    end
end

figure(2)
>>>>>>> origin/master
=======
        figure(1)
        hold on
        stackplot(Stack,iter)
        drawnow
    end
end

figure(2)
>>>>>>> origin/master
plot((1:length(L))',L,'-b')
out = Stack;



end

function out = initiate(Stack)
%% Initiate
% Add a chain if there is only 1

DP = DPSample();
OV = Stack(1,:);

hitstack = randi(OV(2)-OV(1)+1)+OV(1)-1; % where does new chain hit stack
hitchain = randi(DP);                    % which monomer of new chain hits stack

new_chain = [hitstack-hitchain+1, hitstack+DP-hitchain];
out = [Stack;new_chain];
end

function Cuts = make_bins(Rates)
%% Make Bins
% take nx1 [Rates] and turn it into nx1 [Cuts] ranging from 0 to 1
n = length(Rates);
ratesum = sum(Rates);
Cuts = zeros(n,1);
Cuts(1) = Rates(1)/ratesum;

for i = 2:n-1
    Cuts(i) = Rates(i)/ratesum+Cuts(i-1);
end
Cuts(n) = 1;
end

function process = choose_process(rando,Cuts)
%% Choose Process
% Take a random number and determine an integer that tells you which
% process to perform
above = find(Cuts > rando);
process = above(1);
end

%% PROCESSES
% The actual processes are contained here

function out = perform_process(Stack,p)
%% Perform Process
% take a selected process and the existing stack and DO THAT SHIT

if p==1
    out = add_front(Stack);
elseif p==2
    out = add_back(Stack);
elseif p==3
    out = det_front(Stack);
elseif p==4
    out = det_back(Stack);
end

end

function out = add_front(Stack)

new_chain = collide(Stack,length(Stack),length(Stack)-1);
out = [Stack; new_chain];

end

function out = add_back(Stack)

new_chain = collide(Stack,1,2);
out = [new_chain;Stack];

end

function out = collide(Stack,front,support)

%% collide
% takes a chain from DPs and collides a random
% monomer with the frontier chain (front, 1x2 vector) and any location
% where front overlaps with support (1x2 vector)

% the output is a 1x2 vector

DP = DPSample();
[OL,OV] = find_overlap(Stack,front,support); % find overlap of previous two chains

hitstack = randi(OV(2)-OV(1)+1)+OV(1)-1; % where does new chain hit stack
hitchain = randi(DP);                    % which monomer of new chain hits stack

out = [hitstack-hitchain+1, hitstack+DP-hitchain];

end

% function out = pick_pol()
% global DPs
% out = DPs(discretesample(DPs(:,3),1),1);
% end

function out = det_front(Stack)

redefine_det(Stack(end,:));
out = Stack(1:end-1,:);

end

function out = det_back(Stack)

redefine_det(Stack(1,:));
out = Stack(2:end,:);

end

%% RATES
% Everything involved with getting rates is in this section
function out = get_rates(Stack)
% 1: add front
% 2: add back
% 3: detach front
% 4: detach back

processes = 4;
out = zeros(processes,1);

out(1) = add_front_rate(Stack);
out(2) = add_back_rate(Stack);
out(3) = det_front_rate(Stack);
out(4) = det_back_rate(Stack);

end

function out = add_front_rate(Stack)
k = 1;
out = k;
end

function out = add_back_rate(Stack)
k = 1;
out = k;
end

function out = det_front_rate(Stack)
global T kb
d0 = intrinsic_detach();
[overlap,OV] = find_overlap(Stack,length(Stack),length(Stack)-1);
Eov = overlap_E();
out = d0*exp(-overlap*Eov/(kb*T));
end

function out = det_back_rate(Stack)
global T kb
d0 = intrinsic_detach();
[overlap,OV] = find_overlap(Stack,1,2);
Eov = overlap_E();
out = d0*exp(-overlap*Eov/(kb*T));
end

function out = intrinsic_detach()
out = 8E11;
end

function out = overlap_E()
out = 1.23E-21;
end


function [overlap_length,overlap_vector] = find_overlap(Stack,i,j)

overlap_vector = [max(Stack(i,1),Stack(j,1)), min(Stack(i,2),Stack(j,2))]; % find overlap of previous two chains
overlap_length = overlap_vector(2)-overlap_vector(1)+1;

end

% function DPs = redefine_add(new_chain)
% global DPdist1
% x = find(DPdist1==new_chain(2)-new_chain(1)+1);
% DPdist1(x(discretesample(x,1))) = [];
% DPs = tabulate(DPdist1);
% 
% end

%% Distribution Changes

function DPs = redefine_det(det_chain)

global DPdist1
DPdist1 = [DPdist1; det_chain(2)-det_chain(1)+1];

end

function ChainLength = DPSample()

global DPdist1
NumFreeChains = size(DPdist1,1);    % How many chains are solvated, total
Which = randi(NumFreeChains,1);     % Pick one
ChainLength = DPdist1(Which,1);     % Find its length
DPdist1(Which,:) = [];              % Remove it from the distribution

end
