function [XYZ, Edge, NN] = FindNN(XYZ,Edge,BoxWidth,MaxEdgeDist,MinEdgeDist)

%% Find Nearest Neighbors
% Given XYZ, a list of points, and
% Edge, a list of known edges between points

NN = zeros(size(XYZ,1),4);
ed = size(Edge,1);
BondType = 3; % amorphous bonds only implemented here

for ii = 1:ed
    pt1 = Edge(ii,1);
    pt2 = Edge(ii,2);
    NN(pt1,find(NN(pt1,:)==0,1)) = pt2;
    NN(pt2,find(NN(pt2,:)==0,1)) = pt1;
end

XYZ = [XYZ (1:size(XYZ,1))']; % Keep track of original indices
Unconn = find(NN(:,2)==0|NN(:,3)==0|NN(:,4)==0);
UC = XYZ(Unconn,:);           % Elements of XYZ that are not fully connected
% UCNN = NN(Unconn,:);
xsearch = BoxWidth/2;
ysearch = BoxWidth/2;
MinDistSq = MinEdgeDist^2;
MaxDistSq = MaxEdgeDist^2;
RemoveList = zeros(length(UC),1);
RemoveCount = 1;

NewEdges = zeros(2*length(Unconn),3);
NewEdCount = 1;

while not(isempty(UC))
    pt = UC(1,:);
    x = pt(1);
    y = pt(2);
    bin = pt(3);
    origidx = pt(4);
    
    nn = find(UC(:,1)>(x-xsearch)&...
              UC(:,1)<(x+xsearch)&...
              UC(:,2)>(y-ysearch)&...
              UC(:,2)<(y+ysearch));
    
    for i = nn' % for all of this point's nearest neighbors
        nndist = ((UC(i,1)-x)^2+(UC(i,2)-y)^2); % find the actual distance between the point in consideration and its nn
        if nndist<MinDistSq                     % if it's too close
            RemoveList(RemoveCount) = UC(i,4);  % Slate the too-close nn for deletion from XYZ and don't make an edge
            RemoveCount = RemoveCount+1;
        elseif nndist>MaxDistSq                 % if it's too far, make no edge
        elseif ismember(UC(i,4),NN(origidx,:))  % if this neighbor is already connected, make no edge
        else
            NewEdges(NewEdCount,:) = [origidx UC(i,4) BondType];
        end
    end
    UC = UC(2:end,:);
end

LastEdge = find(NewEdges(:,1)==0,1)-1;
Edge = [Edge; NewEdges(1:LastEdge,:)];

end