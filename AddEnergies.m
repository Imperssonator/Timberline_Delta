function [TofXY TofEdge] = AddEnergies(XYZ,Edge,ImPath,ImSize)

%% Add Energies
% This function takes the lattice matrices generated by Populate Lattice
% and turns them into text files that can be used as the input to the ToFeT
% program WHICH SIMULATES MOTHAFUCKIN MOBILITY

% ImSize is the width of the image in nanometers

%% Initialize Variables

TofXY = cell(size(XYZ,1),5);
TofEdge = cell(size(Edge,1),3);

%% Hard Coded Params

bins = 5;

LeftMargin = 1;            % Any monomer <1 nm from the "electrode" is a generator
RightMargin = ImSize-1; % Same for collectors

BackboneT = 1;              % Backbone transfer integral is 1 eV
PiStackT = 0.1;             % Pi Stack transfer integral is 0.1 eV
AmorphT = 0.1;              % Amorhpous transfer integral... kind of random, lots of theory could go into this

%% Generate XYZ Cell Array
% X becomes Z, Y stays Y and fill in 0's for X
% Site energies come from gaussians in separate functions
disp('Making XYZ')

for i = 1:length(XYZ)
    TofXY{i,1} = 0;
    TofXY{i,2} = XYZ(i,2)*10;       % Angstroms apparently
    TofXY{i,3} = XYZ(i,1)*10;
    if XYZ(i,3) ~= 5                % if not crystalline
        TofXY{i,5} = PickAmorphE(); % Pick an amorphous energy
    else
        TofXY{i,5} = PickXtalE();   % Else pick a crystal energy
    end
    if XYZ(i,1)<LeftMargin          % If the point is close to left edge
        TofXY{i,4} = 'g';           % generator
    elseif XYZ(i,1)>RightMargin     % If it's close to right edge
        TofXY{i,4} = 'c';           % collector
    else
        TofXY{i,4} = '-';           % not either
    end 
end

%% Actually write .xyz File
fileID = fopen([ImPath(1:end-4) '.xyz'], 'w');

formatSpec = '%f %f %f %s %f\n';
[nrows,ncols] = size(TofXY);
for row = 1:nrows
    fprintf(fileID,formatSpec,TofXY{row,:});
end

%% Generate Edge Cell Array
% Fill in the transfer integrals that correspond to the bond types

disp('Making Edge')
for j = 1:length(Edge)
    TofEdge{j,1} = Edge(j,1)-1;
    TofEdge{j,2} = Edge(j,2)-1;
    if Edge(j,3) == 1
        TofEdge{j,3} = BackboneT;
    elseif Edge(j,3) == 2
        TofEdge{j,3} = PiStackT;
    else
        TofEdge{j,3} = AmorphT;
    end
end

%% Write the .edge file
fileID = fopen([ImPath(1:end-4) '.edge'], 'w');

formatSpec = '%d %d %f\n';
[nrows,ncols] = size(TofEdge);
for row = 1:nrows
    fprintf(fileID,formatSpec,TofEdge{row,:});
end

%% Write the .occ file
hoppers = 10;
fileID = fopen([ImPath(1:end-4) '.occ'], 'w');
formatSpec = '%d\n';
OCC = randperm(size(TofXY,1),hoppers)';
fprintf(fileID,formatSpec,OCC);
    
end